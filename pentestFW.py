from colorama import init, Fore
import subprocess as sp
import os, sys, getpass, hashlib
from colorama import init, Fore
import importlib.util as iu
import mysql.connector as sc
import pandas as pd
if not ("SUDO_UID" in os.environ and "SUDO_USER" in os.environ):
    print(Fore.RED+"You should run the script with root privilege")
    sys.exit(1)
init(autoreset=True)
loc = os.path.dirname(os.path.abspath(__file__))
login = open(f"{loc}/Data/login.txt")
lg = (login.read()).split('\n')
login.close()
db = sc.connect(host='localhost', user=lg[0], password = lg[1])


def data_base_exists():
    cu = db.cursor()
    cu.execute("SHOW DATABASES like 'PentestFW';")
    exits = len(cu.fetchall()) > 0
    cu.close()
    return exits
if not data_base_exists():
    print(Fore.RED+'You have not installed the PentestFW on your machine, run the install script and try again.')
    sys.exit(404)
FW_username = input("Enter your username: ")
FW_password = getpass.getpass("Enter your password: ")
FW_password = hashlib.sha256(FW_password.encode()).hexdigest()

with db.cursor() as cur:
        cur.execute('USE PentestFW;')
        cur.execute('TRUNCATE TABLE Current_User_Table;')
        db.commit()

def module_exists(module):
    cur = db.cursor()
    cur.execute('USE PentestFW;')
    cur.execute(f"SELECT * FROM Modules WHERE module = '{module}';")
    data = cur.fetchall()
    cur.close()
    return data
def load(module):
    if not module_exists(cmnd[1]) or not os.path.isfile(f"{loc}/Modules/{cmnd[1]}.py"):
        print(Fore.RED+'The specified module was not found!')
        return 1
    try:
        spec = iu.spec_from_file_location(module, f"{loc}/Modules/{module}.py")
        md = iu.module_from_spec(spec)
        spec.loader.exec_module(md)
        md.run()
    except SystemExit:
        pass


def search(key):
    sp.run(f'python3 {loc}/list_modules.py | grep -i -e {key}', shell=True)

command = ['help', 'options','add user', 'list', 'search', 'load', '!', 'bash', 'history']
usage = ['To print this help message.', 'To print this help message.','To add a new user.', 'To list all available modules.', 'To search in modules.', 'To execute a specific system command.', 'To execute a specific bash script.', 'To load a listener module.', 'To print logs data.']
syntax = ['help', 'options', 'add user','list', 'search kew_word', 'load module', '! ls /home', 'bash script.sh', 'history']


def parse_input(cmnd):
    if cmnd[0] == 'list':
        sp.run(f'python3 {loc}/list_modules.py', shell=True)
    elif cmnd[0] == 'help' or cmnd[0] == 'options':
        dicti = {"Command":command,'Usage': usage, 'Syntax':syntax}
        opt = pd.DataFrame(dicti)
        opt.set_index("Command",inplace=True)
        print(opt)
    elif cmnd[0] == 'search':
        search(" ".join(cmnd[1:]))
    elif cmnd[0] == 'load':
            load(cmnd[1])
    elif cmnd[0] == '!':
        if cmnd[1] == 'cd': os.chdir(cmnd[2])
        else: sp.run(f'{" ".join(cmnd[1:])}', shell=True)
    elif cmnd[0] == 'bash':
        if os.path.isfile(cmnd[1]) and '.sh' in cmnd[1]:
            sp.run(f'bash {cmnd[1]}', shell=True)
        else:
            print(Fore.RED+'The specified shell script was not found')
    elif cmnd[0] == 'exit':
        with db.cursor() as cur:
            sys.exit(0)
    elif cmnd[0] == 'history':
        try:
            with db.cursor() as cur:
                cur.execute('USE PentestFW;')
                cur.execute("SELECT Modules.module as 'Module', Users.username as 'User', Log.notes as 'Notes', Log.the_Time as 'Date and Time' FROM Log JOIN Modules on Log.module_ID = Modules.module_ID join Users on Users.user_id = Log.user_id;")
                data = cur.fetchall()
                data = pd.DataFrame(data)
                data.columns = ['Module', 'User', 'Notes', 'Date and Time']
                print(data)
        except: pass
    elif cmnd[0].lower() == 'add' and cmnd[1].lower() == 'user':
        FWusername = input("Enter the new username: ")
        FWpasswd = getpass.getpass(f"Enter the password for {FWusername}: ").encode()
        FWpasswd = hashlib.sha256(FWpasswd).hexdigest()
        with db.cursor() as cur:
            cur.execute("USE PentestFW;")
            cur.execute(f"INSERT INTO Users(username, pass_word) VALUES('{FWusername}', '{FWpasswd}');")
            db.commit()
    else:
        print('You have entered an illegal command')


userID = ''
with db.cursor() as cur:
    cur.execute('USE PentestFW;')
    cur.execute(f"SELECT pass_word, user_ID FROM Users WHERE username = '{FW_username}'")
    fet = cur.fetchall()
    try:
        userID = fet[0][1]
        passwd = fet[0][0]
        if FW_password != passwd:
            print(Fore.RED+"Login Failed")
            sys.exit(1)
    except IndexError:
        print(Fore.RED+"Login Failed")
        sys.exit(1)
with db.cursor() as cur:
    cur.execute('USE PentestFW;')
    cur.execute(f"INSERT INTO Current_User_Table VALUES({userID})")
    db.commit()

while True:
    try:
        cmnd = input('PentestFW>')
        cmnd = cmnd.split()
        parse_input(cmnd)
    except KeyboardInterrupt:
        print(Fore.RED+'KeyboardInterrupt\nTo exit type `exit` ')
    except IndexError:
        print(Fore.RED+f'You have entered an illegal command!')
