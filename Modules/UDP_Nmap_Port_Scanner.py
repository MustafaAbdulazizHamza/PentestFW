import nmap
import argparse as ap
import sys, os
import mysql.connector as ms
import pandas as pd
from colorama import Fore, init
cat = 2
descript = 'This module uses Nmap to perform UDP port scanning'
apar = ap.ArgumentParser(description=descript)
apar.add_argument('-d', '--Description', action='store_true' ,required=False)
apar.add_argument('-c', "--Category", action='store_true', required=False)
ar = apar.parse_args()
if ar.Description:
    print(descript)
    sys.exit(0)
if ar.Category:
    print(cat)
    sys.exit(0)
module = os.path.basename(__file__).split('.')[0]
loc = os.path.dirname(os.path.abspath(__file__))
login = open(f"{loc}/../Data/login.txt")
lg = (login.read()).split('\n')
login.close()
db = ms.connect(host='localhost',user = lg[0], password=lg[1])
cursor = db.cursor()
cursor.execute("USE PentestFW;")
cursor.execute(f"SELECT module_ID FROM Modules WHERE module = '{module}'")
module_ID = cursor.fetchall()[0][0]
cursor.close()
cursor = db.cursor()
cursor.execute("SELECT * FROM Current_User_Table;")
user_ID = cursor.fetchall()[0][0]
init(autoreset=True)
options = {'Target': ['127.0.0.0', 'The IP address for the target machine'], 'Ports': ['80', 'The port, number or range of ports']}


def Port_Scanner(Target, Ports ):
    nmapScanner = nmap.PortScanner()
    nmapScanner.scan(hosts=Target, ports=Ports, arguments='-sU -sV')
    Live_Hosts = nmapScanner.all_hosts()
    for host in Live_Hosts:
        mac = 'Unkown'
        vendor = 'Unkown vendor'
        if 'addresses' in nmapScanner[host].keys() and 'mac' in nmapScanner[host]['addresses']:
            mac = nmapScanner[host]['addresses']['mac']
            try:
                vendor = nmapScanner[host]['vendor'][mac]
            except KeyError:
                pass
        print(Fore.YELLOW+"\nScanning results for the host {} whose MAC address is {} ({})\n".format(host, mac, vendor))
        if 'udp' in nmapScanner[host].all_protocols():
            Ports = [port for port in nmapScanner[host]['udp'].keys()]
            States = [nmapScanner[host]['udp'][port]['state'] for port in nmapScanner[host]['udp'].keys()]
            Reesons = [nmapScanner[host]['udp'][port]['reason'] for port in nmapScanner[host]['udp'].keys()]
            Services = [nmapScanner[host]['udp'][port]['name'] + ' ' +nmapScanner[host]['udp'][port]['product']+' '+nmapScanner[host]['udp'][port]['version'] for port in nmapScanner[host]['udp'].keys()]
            dict = {"Port":Ports, "State":States, "Reeson":Reesons, "Service":Services }
            dataf = pd.DataFrame(dict)
            dataf.set_index("Port", inplace=True)
            print(dataf)

        else:
             print(Fore.RED+"All ports are closed")
    print("\n")
    if len(Live_Hosts) > 1:
            print(Fore.GREEN+"{} hosts were scanned in {} seconds".format(len(Live_Hosts),nmapScanner.scanstats()['elapsed']))
    elif len(Live_Hosts) == 1:
            print(Fore.GREEN+"One host was scanned in {} seconds".format(nmapScanner.scanstats()['elapsed']))
    elif len(Live_Hosts) == 0:
            print(Fore.RED+"No host was scenned, all given hosts are down")

def Scan():
    try:
        Port_Scanner(options['Target'][0], options['Ports'][0])
    except KeyboardInterrupt:
        pass
    except Exception as e:
        print(Fore.RED+f"{e}")
while True:
    try:
        cmnd = input(f'PentestFW>({Fore.CYAN+module+Fore.RESET})>>>').split()
        if cmnd[0].lower() == 'set':
            if not cmnd[1] in options.keys() or len(cmnd) != 3:
                print(Fore.RED+'You have entered an illegal set command!')
            else:
                options[cmnd[1]][0] = cmnd[2]
        elif cmnd[0].lower() == 'clear':
              os.system("clear")
        elif cmnd[0].lower() == 'exit':
            notes = input(">>>Enter your notes if exists: ")
            if not notes:
                notes = 'No Notes'
            with db.cursor() as cur:
                cur.execute(f"INSERT INTO Log(module_ID, user_ID, notes) VALUES({module_ID}, {user_ID}, '{notes}');")
                db.commit()
            sys.exit()
        elif cmnd[0].lower() == 'run' or cmnd[0].lower() == 'exploit':
            Scan()
        elif cmnd[0].lower() == 'options':
            dict = {'Options':[key for key in options.keys()], 'Values':[options[key][0] for key in options.keys()], 'Description':[options[key][1] for key in options.keys()]}
            print(pd.DataFrame(dict))
        else:
            print(Fore.RED+"You have entered an illegal command!")
    except KeyboardInterrupt:
        print(Fore.RED+'You should enter `exit` to exit the module')
    except IndexError:
        print(Fore.RED+"Illegal command!")

