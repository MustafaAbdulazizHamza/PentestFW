import argparse as ap
import sys, os
import mysql.connector as ms
import pandas as pd
from colorama import Fore, init
import nmap
cat = 2
descript = 'This module uses Nmap tool to perform ARP network scan.'
apar = ap.ArgumentParser(description=descript)
apar.add_argument('-d', '--Description', action='store_true' ,required=False)
apar.add_argument('-c', "--Category", action='store_true', required=False)
ar = apar.parse_args()
if ar.Description:
    print(descript)
    sys.exit(0)
if ar.Category:
    print(cat)
    sys.exit(0)
module = os.path.basename(__file__).split('.')[0]
loc = os.path.dirname(os.path.abspath(__file__))
login = open(f"{loc}/../Data/login.txt")
lg = (login.read()).split('\n')
login.close()
db = ms.connect(host='localhost',user = lg[0], password=lg[1])
cursor = db.cursor()
cursor.execute("USE PentestFW;")
cursor.execute(f"SELECT module_ID FROM Modules WHERE module = '{module}'")
module_ID = cursor.fetchall()[0][0]
cursor.close()
cursor = db.cursor()
cursor.execute("SELECT * FROM Current_User_Table;")
user_ID = cursor.fetchall()[0][0]
init(autoreset=True)
options = {'Targets': ['192.168.0.1/24', 'The IP address of the target machine']}

def Host_Scanner(Target):
    HostScanner = nmap.PortScanner()
    HostScanner.scan(hosts=Target, arguments='-sn')
    hosts = HostScanner.all_hosts()
    host_data = []
    for host in hosts:
        hasMAC = True
        try:
            mac = HostScanner[host]['addresses']['mac']
        except KeyError:
            mac = "Unknown\t\t  "
        d = {'IP' : host, 'MAC' : mac}
        host_data.append(d)
    return host_data
def Process(Target):
    exh = []
    li = []
    while True:
        try:
            li = Host_Scanner(Target)
        except:
            break
        for host in li:
            if host["IP"] not in exh:
                exh.append(host['IP'])
                print(Fore.GREEN+f"{host['IP']}\t{host['MAC']}\tARP Respond")


while True:
    try:
        cmnd = input(f'PentestFW>({Fore.CYAN+module+Fore.RESET})>>>').split()
        if cmnd[0].lower() == 'set':
            if not cmnd[1] in options.keys() or len(cmnd) != 3:
                print(Fore.RED+'You have entered an illegal set command!')
            else:
                options[cmnd[1]][0] = cmnd[2]
        elif cmnd[0].lower() == 'exit':
            notes = input(">>>Enter your notes if exists: ")
            if not notes:
                notes = 'No Notes'
            with db.cursor() as cur:
                cur.execute(f"INSERT INTO Log(module_ID, user_ID, notes) VALUES({module_ID}, {user_ID}, '{notes}');")
                db.commit()
            sys.exit()
        elif cmnd[0].lower() == 'run' or cmnd[0].lower() == 'exploit':
            Process(options['Targets'][0])
        elif cmnd[0].lower() == 'options':
            dict = {'Options':[key for key in options.keys()], 'Values':[options[key][0] for key in options.keys()], 'Description':[options[key][1] for key in options.keys()]}
            print(pd.DataFrame(dict))
        else:
            print(Fore.RED+"You have entered an illegal command!")
    except KeyboardInterrupt:
        print(Fore.RED+'You should enter `exit` to exit the module')
    except IndexError:
        print(Fore.RED+"Illegal command!")
