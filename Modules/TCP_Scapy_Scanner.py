import argparse as ap
import sys, os, re
import mysql.connector as ms
import pandas as pd
from colorama import Fore, init
import scapy.all as sc
import concurrent.futures as cf
cat = 2
descript = 'This module uses Scapy to perform TCP SYN port scanning'
apar = ap.ArgumentParser(description=descript)
apar.add_argument('-d', '--Description', action='store_true' ,required=False)
apar.add_argument('-c', "--Category", action='store_true', required=False)
ar = apar.parse_args()
if ar.Description:
    print(descript)
    sys.exit(0)
if ar.Category:
    print(cat)
    sys.exit(0)
module = os.path.basename(__file__).split('.')[0]
loc = os.path.dirname(os.path.abspath(__file__))
login = open(f"{loc}/../Data/login.txt")
lg = (login.read()).split('\n')
login.close()
db = ms.connect(host='localhost',user = lg[0], password=lg[1])
cursor = db.cursor()
cursor.execute("USE PentestFW;")
cursor.execute(f"SELECT module_ID FROM Modules WHERE module = '{module}'")
module_ID = cursor.fetchall()[0][0]
cursor.close()
cursor = db.cursor()
cursor.execute("SELECT * FROM Current_User_Table;")
user_ID = cursor.fetchall()[0][0]
init(autoreset=True)
options = {'Target': ['127.0.0.0', 'The IP address for the target machine'], 'Ports': ['80', 'The port, number or range of ports'], 'Verbose': [False, 'Verbos mode']}

def port_scanner(port):
    target = options['Target'][0]
    pkt = sc.Ether()/sc.IP(dst=target)/sc.TCP(dport=port,sport= 8064, flags='S')
    r = sc.srp(pkt, verbose=False)[0]
    try:
        if r[0][1][sc.TCP].flags == 'RA' and not options['Verbose'][0]:
            return
        if r[0][1][sc.TCP].flags == 'RA': return f"{port}\tClose\tNAS"
        return f"{port}\tOpen\t{r[0][1][sc.IP].ttl}"
    except Exception as e:
        print(Fore.RED+f'Something went wrong\nException: {e}')


def Scan():
    ports = []
    if re.match(r'^\d+(,\d+)*$', options['Ports'][0]):
        ports = [int(port) for port in options['Ports'][0].split(',')]
    elif re.match(r'^\d+-\d+$', options['Ports'][0]): 
        p = options['Ports'][0].split('-')
        ports = [int(port) for port in range(int(p[0]),int(p[1]))]
    print("Port\tState\tttl")
    with cf.ThreadPoolExecutor() as ex:
        results = ex.map(port_scanner, ports)

        for result in results:
            if result != None:
                print(result)


while True:
    try:
        cmnd = input(f'PentestFW>({Fore.CYAN+module+Fore.RESET})>>>').split()
        if cmnd[0].lower() == 'set':
            if not cmnd[1] in options.keys() or len(cmnd) != 3:
                print(Fore.RED+'You have entered an illegal set command!')
            else:
                options[cmnd[1]][0] = cmnd[2]
        elif cmnd[0].lower() == 'exit':
            notes = input(">>>Enter your notes if exists: ")
            if not notes:
                notes = 'No Notes'
            with db.cursor() as cur:
                cur.execute(f"INSERT INTO Log(module_ID, user_ID, notes) VALUES({module_ID}, {user_ID}, '{notes}');")
                db.commit()
            sys.exit()
        elif cmnd[0].lower() == 'run' or cmnd[0].lower() == 'exploit':
            try:
                Scan()
            except Exception as e:
                print(Fore.RED+f'{e}')
        elif cmnd[0].lower() == 'options':
            dict = {'Options':[key for key in options.keys()], 'Values':[options[key][0] for key in options.keys()], 'Description':[options[key][1] for key in options.keys()]}
            print(pd.DataFrame(dict))
        else:
            print(Fore.RED+"You have entered an illegal command!")
    except KeyboardInterrupt:
        print(Fore.RED+'You should enter `exit` to exit the module')
    except IndexError:
        print(Fore.RED+"Illegal command!")